<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visualisation on Data Science Explorer</title>
    <link>/tags/visualisation/</link>
    <description>Recent content in Visualisation on Data Science Explorer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/visualisation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The games I played in 2018 Part Two - Insights</title>
      <link>/post/the-games-i-played-in-2018-part-two-insights/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/the-games-i-played-in-2018-part-two-insights/</guid>
      <description>In a previous post I explored my gaming data from 2018.
Today I’m going to zero in on only 2018 data with two objectives;
Find five interesting things
 Visualise those things  Because data exploration and visualisation is such a black hole I’m going to limit myself to one hour to achieve these objectives.
library(jsonlite) # To read in the .json format which is default export from BG Stats library(here) # For relative file paths library(tidyverse) # For general wrangling and exploration library(padr) # To fill in or &amp;#39;pad&amp;#39; dates in a date series  Import # Read json from BG Stats export d &amp;lt;- fromJSON(&amp;quot;data/BGStatsExport.</description>
    </item>
    
    <item>
      <title>The games I played in 2018 Part One - EDA</title>
      <link>/post/the-games-i-played-in-2018-part-one-eda/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/the-games-i-played-in-2018-part-one-eda/</guid>
      <description># TODO - add lat and long details of gaming locations # TODO - group games by RPG, digital and board # TODO - add weekday names and weekend/weekday categories # TODO - add morning/afternoon/evening categories  In 2018 I decided to track every game I played using the BG Stats app. The app comes with some built in statistics which are useful but don’t answer all my questions.
Today I’m going to do some exploratory work in R.</description>
    </item>
    
    <item>
      <title>python training first steps</title>
      <link>/post/python-training-first-steps/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/python-training-first-steps/</guid>
      <description>Today I train on Python skills.
All code is in R except where commented prior as “# Python code”
library(reticulate) # to enable python code chunks in R Markdown matplotlib Matplotlib is a visualization package/library.
# Python code # Import matplotlib import matplotlib.pyplot as plt Using example data
# Python code # Create some data year = [1950, 1970, 1990, 2010] pop = [2.519, 3.692, 5.263, 6.972] # Python code # Line plot plt.</description>
    </item>
    
    <item>
      <title>Animated AFL</title>
      <link>/post/animated-afl/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/animated-afl/</guid>
      <description>Today I explore the gganimate package with AFL data from the fitzRoy package.
Here are the packages used.
# Packages library(tidyverse) # For everything library(here) # For project-oriented workflow library(ggthemes) # For nice plot themes library(devtools) # For non-CRAN packages library(fitzRoy) # Data source library(viridis) # Dependancy library(gganimate) # For animation library(animation) # For animation Load results data - easy with the fitzRoy package.
d &amp;lt;- get_match_results() Goal kicking accuracy of home teams I start by looking at goal kicking accuracy for home teams only.</description>
    </item>
    
    <item>
      <title>I don&#39;t want better goal kicking accuracy in the AFL</title>
      <link>/post/i-dont-want-better-goal-kicking-accuracy-in-the-afl/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/i-dont-want-better-goal-kicking-accuracy-in-the-afl/</guid>
      <description>Update: There is far less of a relationship between goal accuracy and margin than originally published - I’ve fixed the error in code below which was using Away.Points instead of Away.Behinds in calculating goal-kicking accuracy.
Today I practice ggplot2 and investigate skills in the AFL.
The #AFLWonkWednesdays week 2 topic is;
What is going on with skills?
There has been a lot of chatter about the quality of skills and goal kicking in the AFL of late.</description>
    </item>
    
    <item>
      <title>2018 Makeover Monday visualisations</title>
      <link>/post/makeover-monday-visualisations/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/makeover-monday-visualisations/</guid>
      <description>I use Makeover Monday to try new visual techniques in R and Tableau.
Week 16 Zambia Southern Province Confirmed Malaria Cases  Week 15 Arctic Sea Ice Tableau version.
 Week 14 Wine Production New techniques used: dplyr::lag to add lag variables and calculate change over time and scale_color_manual for palette
Feedback: Need to add some plain English description of what the chart is showing (the x variable is potentially confusing)</description>
    </item>
    
    <item>
      <title>Learning about kicking in the AFL</title>
      <link>/post/learning-about-kicking-in-the-afl/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/learning-about-kicking-in-the-afl/</guid>
      <description>Today I’m going to have a look at kicking statistics in one of the greatest games on Earth, which is of course Australian Rules Football.
 library(tidyverse) # For everything library(ggthemes) # For some prettier themes Data Big thanks to DFSAustralia for the script that helped me pull this from AFL Tables.
d &amp;lt;- read_csv(&amp;quot;data/afl_stats_2018.csv&amp;quot;) glimpse(d) ## Observations: 1,188 ## Variables: 22 ## $ YR &amp;lt;int&amp;gt; 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 20.</description>
    </item>
    
  </channel>
</rss>